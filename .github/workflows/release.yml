name: Release

on:
  workflow_dispatch:
    inputs:
      release_type:
        description: 'Release type'
        required: true
        type: choice
        options:
          - bugfix
          - feature
          - major
        default: 'bugfix'

permissions:
  contents: write

jobs:
  release:
    name: Create Release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Verify main branch
        run: |
          if [ "${{ github.ref_name }}" != "main" ]; then
            echo "❌ Releases can only be created from the main branch"
            echo "Current branch: ${{ github.ref_name }}"
            exit 1
          fi
          echo "✅ Release from main branch verified"

      - name: Determine new version
        id: version
        run: |
          # Get current version from git tags
          CURRENT_VERSION=$(git tag -l "v*" | sort -V | tail -n1 | sed 's/^v//')
          
          if [ -z "$CURRENT_VERSION" ]; then
            CURRENT_VERSION="0.9.0"
          fi
          
          echo "Current version: $CURRENT_VERSION"
          
          # Parse version components
          IFS='.' read -r MAJOR MINOR PATCH <<< "$CURRENT_VERSION"
          
          # Increment based on release type
          case "${{ github.event.inputs.release_type }}" in
            "major")
              MAJOR=$((MAJOR + 1))
              MINOR=0
              PATCH=0
              ;;
            "feature")
              MINOR=$((MINOR + 1))
              PATCH=0
              ;;
            "bugfix")
              PATCH=$((PATCH + 1))
              ;;
          esac
          
          NEW_VERSION="$MAJOR.$MINOR.$PATCH"
          echo "New version: $NEW_VERSION"
          echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV

      - name: Extract changelog for release
        run: |
          # Extract changelog entries from CHANGES.md for this release
          if [ -f CHANGES.md ]; then
            # Get content between ## [Unreleased] and the next ## version
            RELEASE_NOTES=$(awk '/^## \[Unreleased\]/{flag=1; next} /^## [0-9]/{flag=0} flag && /^### |^- /' CHANGES.md)
            
            if [ -z "$RELEASE_NOTES" ]; then
              RELEASE_NOTES="No changelog entries found for this release."
            fi
          else
            RELEASE_NOTES="No changelog file found."
          fi
          
          echo "RELEASE_NOTES<<EOF" >> $GITHUB_ENV
          echo "$RELEASE_NOTES" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Update changelog
        run: |
          if [ -f CHANGES.md ]; then
            # Update changelog with new version
            sed -i "s/## \[Unreleased\]/## [Unreleased]\n### New\n### Changed\n### Fixed\n\n## $NEW_VERSION - $(date +%Y-%m-%d)/" CHANGES.md
            
            git config --local user.email "action@github.com"
            git config --local user.name "GitHub Action"
            git add CHANGES.md
            git commit -m "Update changelog for release $NEW_VERSION"
          fi

      - name: Create and push tag
        run: |
          git tag "v$NEW_VERSION"
          git push origin "v$NEW_VERSION"
          git push origin main

      - name: Create Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ env.NEW_VERSION }}
          release_name: Release v${{ env.NEW_VERSION }}
          body: |
            ## What's Changed
            
            ${{ env.RELEASE_NOTES }}
            
            ## Installation
            
            Download the MKP file and install it:
            
            **GUI Installation:**
            1. Go to Setup → Extension packages
            2. Click "Upload package"  
            3. Select the downloaded `oposs_smart_errors-${{ env.NEW_VERSION }}.mkp` file
            4. Click "Upload & install"
            
            **CLI Installation:**
            ```bash
            mkp add oposs_smart_errors-${{ env.NEW_VERSION }}.mkp
            ```
            
            ## Requirements
            - CheckMK 2.3.0p1 or later
            - smartmontools package installed on monitored hosts
            - Enterprise storage devices with SCSI error counter logs
            
            ## Manual MKP Upload
            The MKP file for this release needs to be manually uploaded to this release.
          draft: false
          prerelease: false